generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("SUPABASE_DATABASE_URL")
  directUrl = env("SUPABASE_DIRECT_URL")
}

model ReferralCode {
  id                 String               @default(cuid())
  redeemed           Boolean              @default(false)
  generatedById      String               @unique
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt
  referralCode       String               @id @unique
  discount           Int                  @default(50)
  freeTrial          Int                  @default(7)
  newUserPlans       NewUserPlan[]
  generatedBy        User                 @relation("GeneratedByUser", fields: [generatedById], references: [mongoId])
  redeemedBy         User[]               @relation("RedeemedByUser")
  UserAdiraPlan      UserAdiraPlan[]
  UserAdiraPurchases UserAdiraPurchases[]
  UserPurchases      UserPurchases[]
  redeemedAndPayBy   User[]               @relation("RedeemedAndPayByUser")
  UserAllPlan        UserAllPlan[]

  UserAllUKPlan UserAllUKPlan[]

  UserAllUSPlan UserAllUSPlan[]
}

model Plan {
  name            String     @id @unique
  token           Float
  createdAt       DateTime   @default(now())
  updatedAt       DateTime   @updatedAt
  session         Int        @default(1)
  caseSearchToken Int        @default(0)
  gptToken        Int        @default(0)
  duration        String     @default("monthly")
  users           User[]
  planUsers       UserPlan[]
}

model Admin {
  id    String @id @default(cuid())
  users User[] @relation("AdminUsers")
}

model User {
  mongoId                 String               @id
  phoneNumber             String               @unique @db.VarChar(10)
  planName                String               @default("free")
  createdAt               DateTime             @default(now())
  updatedAt               DateTime             @updatedAt
  tokenUsed               Float                @default(0.0)
  generatedReferralCodeId String?
  StateLocation           String               @default("")
  currencyType            String?              @default("INR")
  duration                Int                  @default(0)
  totalTokenUsed          Float                @default(0.0)
  numberOfSessions        Int                  @default(1)
  redeemedReferralCodeId  String?
  adminUserId             String?
  isCasesearch            Boolean              @default(true)
  caseSearchTokenUsed     Int                  @default(0)
  gptTokenUsed            Int                  @default(0)
  totalCaseSearchTokens   Int                  @default(0)
  totalGptTokens          Int                  @default(0)
  isambassadorBenifined   Boolean?
  feedbacks               Feedback[]           @relation("UserFeedback")
  newplans                NewUserPlan[]
  generatedReferralCode   ReferralCode?        @relation("GeneratedByUser")
  sessions                Session[]
  adminUser               Admin?               @relation("AdminUsers", fields: [adminUserId], references: [id])
  plan                    Plan                 @relation(fields: [planName], references: [name])
  redeemedReferralCode    ReferralCode?        @relation("RedeemedByUser", fields: [redeemedReferralCodeId], references: [referralCode])
  UserAdiraPlan           UserAdiraPlan[]
  UserAdiraPurchases      UserAdiraPurchases[]
  plans                   UserPlan[]
  UserPurchases           UserPurchases[]
  NewPlan                 NewPlan[]            @relation("NewPlanToUser")
  redeemedAndPayByCodes   ReferralCode[]       @relation("RedeemedAndPayByUser")
  UserAllPlan             UserAllPlan[]

  UserAllUKPlan UserAllUKPlan[]

  UserAllUSPlan UserAllUSPlan[]
}

model UserPlan {
  userId    String
  planName  String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @default(now())
  expiresAt DateTime?
  plan      Plan      @relation(fields: [planName], references: [name], onDelete: Cascade)
  user      User      @relation(fields: [userId], references: [mongoId], onDelete: Cascade)

  @@id([userId, planName])
}

model NewUserPlan {
  userId         String
  planName       String
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @default(now())
  expiresAt      DateTime?
  isActive       Boolean       @default(false)
  subscriptionId String        @default("")
  isCouponCode   String        @default("")
  referralCodeId String?
  Paidprice      Int           @default(0)
  plan           NewPlan       @relation(fields: [planName], references: [name], onDelete: Cascade)
  referralCode   ReferralCode? @relation(fields: [referralCodeId], references: [referralCode])
  user           User          @relation(fields: [userId], references: [mongoId], onDelete: Cascade)

  @@id([userId, planName])
}

model NewPlan {
  name               String          @id @unique
  legalGptAccess     Boolean         @default(false)
  AICaseSearchAccess Boolean         @default(false)
  AISummerizer       Boolean         @default(false)
  AddOnAccess        Boolean         @default(false)
  createdAt          DateTime        @default(now())
  updatedAt          DateTime        @updatedAt
  session            Int             @default(1)
  duration           String          @default("monthly")
  planUsers          NewUserPlan[]
  UserPurchases      UserPurchases[]
  users              User[]          @relation("NewPlanToUser")
}

model UserPurchases {
  userId         String
  planName       String
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @default(now())
  subscriptionId String        @default("")
  expiresAt      DateTime?
  referralCodeId String?
  Paidprice      Int           @default(0)
  isCouponCode   String        @default("")
  plan           NewPlan       @relation(fields: [planName], references: [name], onDelete: Cascade)
  referralCode   ReferralCode? @relation(fields: [referralCodeId], references: [referralCode])
  user           User          @relation(fields: [userId], references: [mongoId], onDelete: Cascade)

  @@id([userId, planName])
}

model UserAdiraPurchases {
  userId         String
  planName       String
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @default(now())
  subscriptionId String        @default("")
  expiresAt      DateTime?
  referralCodeId String?
  Paidprice      Int           @default(0)
  isCouponCode   String        @default("")
  plan           AdiraPlan     @relation(fields: [planName], references: [name], onDelete: Cascade)
  referralCode   ReferralCode? @relation(fields: [referralCodeId], references: [referralCode])
  user           User          @relation(fields: [userId], references: [mongoId], onDelete: Cascade)

  @@id([userId, planName])
}

model AdiraPlan {
  name                          String               @id
  price                         Int
  duration                      String
  createdAt                     DateTime             @default(now())
  updatedAt                     DateTime             @default(now())
  isTypeOfDocument              Boolean
  isPromptDrafting              Boolean
  isUploadOwnDocument           Boolean
  isUploadOwnDocumentWithPrompt Boolean
  isDownloadWithWaterMark       Boolean
  isSummerizeDocument           Boolean
  isSnippet                     Boolean
  isAnalysieAnyDocument         Boolean
  UserAdiraPlan                 UserAdiraPlan[]
  UserAdiraPurchases            UserAdiraPurchases[]
}

model AllPlan {
  name          String        @id
  price         Int
  duration      String
  legalGptToken Int
  LegalGPTime   Int
  AdiraToken    Int
  AdiraTime     Int
  WarroomToken  Int
  WarroomTime   Int
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @default(now())
  UserAllPlan   UserAllPlan[]
}

model AllUKPlan {
  name          String   @id
  price         Float
  duration      String
  legalGptToken Int
  LegalGPTime   Int
  AdiraToken    Int
  AdiraTime     Int
  WarroomToken  Int
  WarroomTime   Int
  createdAt     DateTime @default(now())
  updatedAt     DateTime @default(now())
  // UserAllPlan   UserAllPlan[]

  UserAllUKPlan UserAllUKPlan[]
}

model AllUSPlan {
  name          String   @id
  price         Float
  duration      String
  legalGptToken Int
  LegalGPTime   Int
  AdiraToken    Int
  AdiraTime     Int
  WarroomToken  Int
  WarroomTime   Int
  createdAt     DateTime @default(now())
  updatedAt     DateTime @default(now())
  // UserAllPlan   UserAllPlan[]

  UserAllUSPlan UserAllUSPlan[]
}

model UserAllPlan {
  userId            String
  planName          String
  UsedlegalGptToken Int           @default(0)
  UsedLegalGPTime   Int           @default(0)
  UsedAdiraToken    Int           @default(0)
  UsedAdiraTime     Int           @default(0)
  UsedWarroomToken  Int           @default(0)
  UsedWarroomTime   Int           @default(0)
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @default(now())
  subscriptionId    String        @default("")
  expiresAt         DateTime?
  isActive          Boolean       @default(false)
  referralCodeId    String?
  Paidprice         Int           @default(0)
  isCouponCode      String        @default("")
  plan              AllPlan       @relation(fields: [planName], references: [name], onDelete: Cascade)
  referralCode      ReferralCode? @relation(fields: [referralCodeId], references: [referralCode])
  user              User          @relation(fields: [userId], references: [mongoId], onDelete: Cascade)

  @@id([userId, planName])
}

model UserAllUKPlan {
  userId            String
  planName          String
  UsedlegalGptToken Int           @default(0)
  UsedLegalGPTime   Int           @default(0)
  UsedAdiraToken    Int           @default(0)
  UsedAdiraTime     Int           @default(0)
  UsedWarroomToken  Int           @default(0)
  UsedWarroomTime   Int           @default(0)
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @default(now())
  subscriptionId    String        @default("")
  expiresAt         DateTime?
  isActive          Boolean       @default(false)
  referralCodeId    String?
  Paidprice         Float         @default(0)
  isCouponCode      String        @default("")
  plan              AllUKPlan     @relation(fields: [planName], references: [name], onDelete: Cascade)
  referralCode      ReferralCode? @relation(fields: [referralCodeId], references: [referralCode])
  user              User          @relation(fields: [userId], references: [mongoId], onDelete: Cascade)

  @@id([userId, planName])
}

model UserAllUSPlan {
  userId            String
  planName          String
  UsedlegalGptToken Int           @default(0)
  UsedLegalGPTime   Int           @default(0)
  UsedAdiraToken    Int           @default(0)
  UsedAdiraTime     Int           @default(0)
  UsedWarroomToken  Int           @default(0)
  UsedWarroomTime   Int           @default(0)
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @default(now())
  subscriptionId    String        @default("")
  expiresAt         DateTime?
  isActive          Boolean       @default(false)
  referralCodeId    String?
  Paidprice         Float         @default(0)
  isCouponCode      String        @default("")
  plan              AllUSPlan     @relation(fields: [planName], references: [name], onDelete: Cascade)
  referralCode      ReferralCode? @relation(fields: [referralCodeId], references: [referralCode])
  user              User          @relation(fields: [userId], references: [mongoId], onDelete: Cascade)

  @@id([userId, planName])
}

model UserAdiraPlan {
  userId             String
  planName           String
  createdAt          DateTime      @default(now())
  updatedAt          DateTime      @default(now())
  subscriptionId     String        @default("")
  expiresAt          DateTime?
  isActive           Boolean       @default(false)
  referralCodeId     String?
  Paidprice          Int           @default(0)
  isCouponCode       String        @default("")
  totalDocuments     Int?
  totalDocumentsUsed Int?
  plan               AdiraPlan     @relation(fields: [planName], references: [name], onDelete: Cascade)
  referralCode       ReferralCode? @relation(fields: [referralCodeId], references: [referralCode])
  user               User          @relation(fields: [userId], references: [mongoId], onDelete: Cascade)

  @@id([userId, planName])
}

model Model {
  name      String    @id
  version   Float
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  sessions  Session[]
}

model Session {
  id        String    @id @default(uuid())
  name      String
  userId    String
  modelName String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  messages  Message[]
  model     Model     @relation(fields: [modelName], references: [name])
  user      User      @relation(fields: [userId], references: [mongoId], onDelete: Cascade)

  @@index([userId])
}

model Message {
  id             String    @id @default(uuid())
  text           String
  isUser         Boolean
  sessionId      String
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  textArray      String[]  @default([])
  contextId      String?
  isDocument     String?
  feedback       Feedback?
  contextMessage Message?  @relation("MessageContext", fields: [contextId], references: [id])
  Message        Message[] @relation("MessageContext")
  session        Session   @relation(fields: [sessionId], references: [id], onDelete: Cascade)

  @@index([sessionId])
}

model Feedback {
  id              String   @id @default(uuid())
  rating          Int?
  messageId       String   @unique
  createdAt       DateTime @default(now())
  feedbackMessage String
  feedbackType    String   @default("ResponseGenerated")
  impression      String   @default("Positive")
  userId          String
  message         Message  @relation(fields: [messageId], references: [id])
  user            User     @relation("UserFeedback", fields: [userId], references: [mongoId])
}
